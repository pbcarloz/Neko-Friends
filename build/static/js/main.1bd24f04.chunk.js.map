{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","height","width","Cardlist","nekos","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredNekos","this","filter","neko","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACxB,OACI,yBAAKC,UAAU,0DACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cAA0CI,OAAO,MAAMC,MAAM,QAClF,6BACI,4BAAKP,GACL,2BAAIC,MCcLO,EAnBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACQ,6BAEWA,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIO,EAAMG,GAAGV,GACbF,KAAMS,EAAMG,GAAGZ,KACfC,MAAOQ,EAAMG,GAAGX,aCEjCa,EAbE,SAAC,GAAiC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC5B,OACI,yBAAKb,UAAU,OACX,2BACAA,UAAU,mCACVc,KAAM,SACNC,YAAY,iBACZC,SAAWH,MCCRI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBlB,OAAQ,UAClEe,EAAMI,WC2CJC,G,wDAvCX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACTvB,MAAO,GACPM,YAAa,IAJP,E,gEAQM,IAAD,OACfkB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACpB,MAAO4B,S,+BAOhC,IAAD,OACCC,EAAgBC,KAAKP,MAAMvB,MAAM+B,QAAO,SAAAC,GAC1C,OAAOA,EAAKzC,KAAK0C,cAAcC,SAAS,EAAKX,MAAMjB,YAAY2B,kBAEnE,OAA+B,IAA5BH,KAAKP,MAAMvB,MAAMmC,OACT,0CAGH,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,qBAAd,gBACA,kBAAC,EAAD,CAAWa,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,MAAO6B,U,GA/BvBO,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACC,kBAAC,EAAD,MACRC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1bd24f04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id }) => {\r\n    return(\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow shadow-5 pointer'>\r\n            <img alt='robots' src={`https://robohash.org/${id}2?set=set4`} height=\"200\" width=\"200\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ nekos }) => {\r\n    return(    \r\n            <div>\r\n                   {\r\n                       nekos.map((user, i) => {\r\n                        return (\r\n                            <Card \r\n                                key={i} \r\n                                id={nekos[i].id} \r\n                                name={nekos[i].name} \r\n                                email={nekos[i].email}\r\n                                />\r\n                            );\r\n                        })\r\n                    } \r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type ='search' \r\n            placeholder='Search Friends'\r\n            onChange={ searchChange } \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflow: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n\r\n","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport SearchBox from '../Components/SearchBox'\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            nekos: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({nekos: users})});\r\n    }\r\n\r\n    onSearchChange = (event) =>  {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const filteredNekos = this.state.nekos.filter(neko => {\r\n            return neko.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.nekos.length === 0){\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return(  \r\n                <div className='tc'>\r\n                    <h1 className='f-subheadline ma1'>Neko Friends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <Cardlist nekos={filteredNekos} />\r\n                    </Scroll>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { nekos }  from './nekos';\n\nReactDOM.render(\n          <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}